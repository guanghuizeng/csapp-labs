# Execution begins at address 0
  			.pos 0
init:		irmovl Stack, %esp
			irmovl Stack, %ebp
			call Main
			halt

.align 4
# Source block
src:
        .long 0x00a
        .long 0x0b0
        .long 0xc00

# Destination block
dest:
        .long 0x111
        .long 0x222
        .long 0x333

Main: 	pushl %ebp
		rrmovl %esp, %ebp
		irmovl src, %eax
		pushl %eax
		irmovl dest, %eax
		pushl %eax
		irmovl $3, %eax
		pushl %eax
		call Copy
		rrmovl %ebp, %esp
		popl %ebp
		ret

		# int Copy(int *src, int *dest, int len)
Copy:	pushl     %ebp
		rrmovl    %esp, %ebp
		mrmovl	  16(%ebp), %ebx		# reverse order
		mrmovl	  12(%ebp), %ecx
		mrmovl	  8(%ebp), %edx
		xorl	  %eax, %eax

Loop:	andl	  %edx, %edx
		je		  End

		mrmovl	  (%ebx), %esi
		rmmovl	  %esi, (%ecx)
		xorl	  %esi, %eax

		irmovl	  $4, %esi
		addl	  %esi, %ebx
		addl	  %esi, %ecx

		irmovl	  $1, %esi
		subl	  %esi, %edx
		
		jmp		  Loop

End:	rrmovl	  %ebp, %esp
		popl	  %ebp
		ret

# The stack starts here and grows to lower addresses
  	  		.pos 0x200
Stack:


